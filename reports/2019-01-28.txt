next	aa96b0ce6b0fa4fa4cc6870f1a3aff3878967bfa
master	16a465bc018d09e9d7bbbdc5f40a7fb99c21f8ef


Uncovered code in 'next' not in 'master'
--------------------------------------------------------

builtin/checkout.c
e8a8a4d7 builtin/checkout.c 256) die(_("make_cache_entry failed for path '%s'"), path);
091e04bc builtin/checkout.c 302) return;
e923a8ab builtin/checkout.c 355) return error(_("index file corrupt"));

builtin/fetch-pack.c
8f6982b4 builtin/fetch-pack.c 225) case protocol_v2:
4316ff30 builtin/fetch-pack.c 226) get_remote_refs(fd[1], &reader, &ref, 0, NULL, NULL);

builtin/fetch.c
3390e42a builtin/fetch.c 1200) warning("Ignoring --negotiation-tip because the protocol does not support it.");
aa57b871 builtin/fetch.c 1481) return;

builtin/grep.c
f9ee2fcd builtin/grep.c 428) return 0;

builtin/rebase.c
ba1905a5 builtin/rebase.c 1220) case REBASE_AM:
ba1905a5 builtin/rebase.c 1221) die(_("--strategy requires --merge or --interactive"));
d421afa0 builtin/rebase.c 1258) die(_("--reschedule-failed-exec requires an interactive rebase"));

commit-reach.c
5227c385 commit-reach.c 326) return ret;

commit.c
bd2c39f5 commit.c 474) return error("Object %s not a commit",

diff.c
b73bcbac diff.c 308) ret = 0;
21536d07 diff.c 812)        (s[off] == '\r' && off < len - 1))
21536d07 diff.c 813) off++;

entry.c
536ec183 entry.c 450) BUG("Can't remove entry to a path");
12dccc16 entry.c 517) return 0;

fetch-pack.c
f7e20501 fetch-pack.c 1125) die(_("Server does not support shallow requests"));
5400b2a2 fetch-pack.c 1235) die(_("expected packfile to be sent after 'ready'"));
f7e20501 fetch-pack.c 1267) die(_("error in object: %s"), reader->line);
f7e20501 fetch-pack.c 1269) die(_("no shallow found: %s"), reader->line);

hex.c
47edb649 hex.c 93) char *sha1_to_hex_r(char *buffer, const unsigned char *sha1)
47edb649 hex.c 95) return hash_to_hex_algop_r(buffer, sha1, &hash_algos[GIT_HASH_SHA1]);
47edb649 hex.c 116) char *hash_to_hex(const unsigned char *hash)

http-push.c
ea82b2a0 http-push.c 1314) p = process_tree(lookup_tree(the_repository, &entry.oid),
ea82b2a0 http-push.c 1318) p = process_blob(lookup_blob(the_repository, &entry.oid),

http.c
beed336c http.c 1898) ret = run_one_slot(slot, &results);
e6cf87b1 http.c 1995) case HTTP_REQUEST_STRBUF:
e6cf87b1 http.c 1996) strbuf_reset(result);
e6cf87b1 http.c 1997) break;
e6cf87b1 http.c 1998) case HTTP_REQUEST_FILE:
e6cf87b1 http.c 1999) if (fflush(result)) {
e6cf87b1 http.c 2000) error_errno("unable to flush a file");
e6cf87b1 http.c 2001) return HTTP_START_FAILED;
e6cf87b1 http.c 2004) if (ftruncate(fileno(result), 0) < 0) {
e6cf87b1 http.c 2005) error_errno("unable to truncate a file");
e6cf87b1 http.c 2006) return HTTP_START_FAILED;
e6cf87b1 http.c 2008) break;
e6cf87b1 http.c 2009) default:
e6cf87b1 http.c 2010) BUG("Unknown http_request target");

list-objects-filter.c
bc5975d2 list-objects-filter.c 146) default:
bc5975d2 list-objects-filter.c 147) BUG("unknown filter_situation: %d", filter_situation);

pretty.c
ad6f028f pretty.c 1204) return 0;

remote-curl.c
a04ff3ec remote-curl.c 557) static size_t rpc_in(char *ptr, size_t eltsize,
b79bdd8c remote-curl.c 564) if (curl_easy_getinfo(data->slot->curl, CURLINFO_RESPONSE_CODE,
b79bdd8c remote-curl.c 566) return size;
b79bdd8c remote-curl.c 567) if (response_code >= 300)
b79bdd8c remote-curl.c 568) return size;
296b847c remote-curl.c 569) if (size)
cf2fb92b remote-curl.c 571) write_or_die(data->rpc->in, ptr, size);
de1a2fdd remote-curl.c 572) return size;
cb8010bb remote-curl.c 637) uintmax_t size = len;

sha1-array.c
161b1cf3 sha1-array.c 91) oidcpy(&oids[dst], &oids[src]);

sha1-file.c
ac73cedf sha1-file.c 114) static void git_hash_unknown_final(unsigned char *hash, git_hash_ctx *ctx)
1a07e59c sha1-file.c 116) BUG("trying to finalize unknown hash");
024aa469 sha1-file.c 1358) return -1;
ee1c6c34 sha1-file.c 1766) return 0;

t/helper/test-hash-speed.c
37649b7f t/helper/test-hash-speed.c 6) static inline void compute_hash(const struct git_hash_algo *algo, git_hash_ctx *ctx, uint8_t *final, const void *p, size_t len)
37649b7f t/helper/test-hash-speed.c 8) algo->init_fn(ctx);
37649b7f t/helper/test-hash-speed.c 9) algo->update_fn(ctx, p, len);
37649b7f t/helper/test-hash-speed.c 10) algo->final_fn(final, ctx);
37649b7f t/helper/test-hash-speed.c 11) }
37649b7f t/helper/test-hash-speed.c 13) int cmd__hash_speed(int ac, const char **av)
37649b7f t/helper/test-hash-speed.c 18) unsigned bufsizes[] = { 64, 256, 1024, 8192, 16384 };
37649b7f t/helper/test-hash-speed.c 21) const struct git_hash_algo *algo = NULL;
37649b7f t/helper/test-hash-speed.c 23) if (ac == 2) {
37649b7f t/helper/test-hash-speed.c 24) for (i = 1; i < GIT_HASH_NALGOS; i++) {
37649b7f t/helper/test-hash-speed.c 25) if (!strcmp(av[1], hash_algos[i].name)) {
37649b7f t/helper/test-hash-speed.c 26) algo = &hash_algos[i];
37649b7f t/helper/test-hash-speed.c 27) break;
37649b7f t/helper/test-hash-speed.c 31) if (!algo)
37649b7f t/helper/test-hash-speed.c 32) die("usage: test-tool hash-speed algo_name");
37649b7f t/helper/test-hash-speed.c 35) initial = clock();
37649b7f t/helper/test-hash-speed.c 37) printf("algo: %s\n", algo->name);
37649b7f t/helper/test-hash-speed.c 39) for (i = 0; i < ARRAY_SIZE(bufsizes); i++) {
37649b7f t/helper/test-hash-speed.c 42) p = xcalloc(1, bufsizes[i]);
37649b7f t/helper/test-hash-speed.c 43) start = end = clock() - initial;
37649b7f t/helper/test-hash-speed.c 44) for (j = 0; ((end - start) / CLOCKS_PER_SEC) < NUM_SECONDS; j++) {
37649b7f t/helper/test-hash-speed.c 45) compute_hash(algo, &ctx, hash, p, bufsizes[i]);
37649b7f t/helper/test-hash-speed.c 51) if (!(j & 127))
37649b7f t/helper/test-hash-speed.c 52) end = clock() - initial;
37649b7f t/helper/test-hash-speed.c 54) kb = j * bufsizes[i];
37649b7f t/helper/test-hash-speed.c 55) kb_per_sec = kb / (1024 * ((double)end - start) / CLOCKS_PER_SEC);
37649b7f t/helper/test-hash-speed.c 56) printf("size %u: %lu iters; %lu KiB; %0.2f KiB/s\n", bufsizes[i], j, kb, kb_per_sec);
37649b7f t/helper/test-hash-speed.c 57) free(p);
37649b7f t/helper/test-hash-speed.c 60) exit(0);

t/helper/test-hash.c
50c817e0 t/helper/test-hash.c 17) bufsz = strtoul(av[1], NULL, 10) * 1024 * 1024;
50c817e0 t/helper/test-hash.c 21) bufsz = 8192;
50c817e0 t/helper/test-hash.c 24) fprintf(stderr, "bufsz %u is too big, halving...\n", bufsz);
50c817e0 t/helper/test-hash.c 25) bufsz /= 2;
50c817e0 t/helper/test-hash.c 26) if (bufsz < 1024)
50c817e0 t/helper/test-hash.c 27) die("OOPS");
50c817e0 t/helper/test-hash.c 42) die_errno("test-hash");

transport-helper.c
87c2d9d3 transport-helper.c 683) struct strbuf expanded_filter_spec = STRBUF_INIT;
87c2d9d3 transport-helper.c 684) expand_list_objects_filter_spec(
87c2d9d3 transport-helper.c 685) &data->transport_options.filter_options,
87c2d9d3 transport-helper.c 687) set_helper_option(transport, "filter",
87c2d9d3 transport-helper.c 688)   expanded_filter_spec.buf);
87c2d9d3 transport-helper.c 689) strbuf_release(&expanded_filter_spec);

tree-walk.c
0a3faa45 tree-walk.c 530) oidcpy(result, &oid);

tree.c
60c38b9e tree.c 104) commit = lookup_commit(r, &entry.oid);

upload-pack.c
0b6069fe upload-pack.c 148) argv_array_pushf(&pack_objects.args, "--filter=%s", buf.buf);

Commits introducting uncovered code:
Ævar Arnfjörð Bjarmason	e8a8a4d7 i18n: git-checkout basic messages
Brandon Williams	8f6982b4 protocol: introduce enum protocol_version value protocol_v2
Brandon Williams	f9ee2fcd grep: recurse in-process using 'struct repository'
Brandon Williams	f7e20501 fetch-pack: support shallow requests
brian m. carlson	0a3faa45 tree-walk: copy object ID before use
brian m. carlson	50c817e0 t: make the sha1 test-tool helper generic
brian m. carlson	37649b7f t/helper: add a test helper to compute hash speed
brian m. carlson	ac73cedf hash: create union for hash context allocation
brian m. carlson	ea82b2a0 tree-walk: store object_id in a separate member
brian m. carlson	47edb649 hex: introduce functions to print arbitrary hashes
Dan McGee	a04ff3ec http: make curl callbacks match contracts from curl header
David Turner	296b847c remote-curl: don't hang when a server dies before any output
Derrick Stolee	5227c385 commit-reach: move walk methods from commit.c
Issac Trotts	ad6f028f log: add %S option (like --source) to log --format
Jeff Hostetler	aa57b871 fetch: inherit filter-spec from partial clone
Jeff King	ee1c6c34 sha1_file: only freshen packs once per run
Jeff King	beed336c http: never use curl_easy_perform
Johannes Schindelin	d421afa0 rebase: introduce --reschedule-failed-exec
Jonathan Tan	5400b2a2 fetch-pack: be more precise in parsing v2 response
Jonathan Tan	4316ff30 fetch-pack: support protocol version 2
Jonathan Tan	3390e42a fetch-pack: support negotiation tip whitelist
Jonathan Tan	0b6069fe fetch-pack: test support excluding large blobs
Josh Steadmon	87c2d9d3 filter-options: expand scaled numbers
Junio C Hamano	60c38b9e Merge branch 'bc/tree-walk-oid' into next
Linus Torvalds	12dccc16 Make fiel checkout function available to the git library
Masaya Suzuki	b79bdd8c remote-curl: unset CURLOPT_FAILONERROR
Masaya Suzuki	cf2fb92b remote-curl: define struct for CURLOPT_WRITEFUNCTION
Masaya Suzuki	e6cf87b1 http: enable keep_error for HTTP requests
Matthew DeVore	bc5975d2 list-objects-filter: implement filter tree:0
Nguyễn Thái Ngọc Duy	1a07e59c Update messages in preparation for i18n
Nicolas Pitre	bd2c39f5 [PATCH] don't load and decompress objects twice with parse_object()
Phillip Wood	b73bcbac diff: allow --no-color-moved-ws
Phillip Wood	21536d07 diff --color-moved-ws: modify allow-indentation-change
Pratik Karki	ba1905a5 builtin rebase: add support for custom merge strategies
Shawn O. Pearce	de1a2fdd Smart push over HTTP: client side
Stefan Beller	161b1cf3 sha1-array: provide oid_array_filter
Takuto Ikuta	024aa469 fetch-pack.c: use oidset to check existence of loose object
Thomas Gummerer	536ec183 entry: support CE_WT_REMOVE flag in checkout_entry
Thomas Gummerer	091e04bc checkout: introduce --{,no-}overlay option
Torsten Bögershausen	cb8010bb remote-curl.c: xcurl_off_t is not portable (on 32 bit platfoms)
Vasco Almeida	e923a8ab i18n: standardise messages


