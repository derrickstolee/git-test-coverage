pu	e4dff993753404a5ccad01b4fe6ee5e6220ce476
jch	e6e34fe96357f3f880b20c931ff60795a52d9fa9
next	78d2f28ef79dd8b18c8ea7192d6050994a240e47
master	bc12974a897308fd3254cf0cc90319078fe45eea
master@{1}	4c86140027f4a0d2caaa3ab4bd8bfc5ce3c11c8a


Uncovered code in 'pu' not in 'jch'
--------------------------------------------------------

builtin/fetch-pack.c

builtin/pack-objects.c
820a5361 995) BUG("configured exclusion wasn't configured");
820a5361 2931) die(_("value of uploadpack.blobpackfileuri must be "
820a5361 2934) die(_("object already configured in another "

builtin/rebase.c
1406adc0 1897) die(_("cannot combine '--rebase-merges' with "

fetch-pack.c
820a5361 1397) die("expected '<hash> <uri>', got: %s\n", reader->line);
820a5361 1402) die("expected DELIM");
820a5361 1530) die("fetch-pack: unable to spawn http-fetch");
820a5361 1534) die("fetch-pack: expected keep then TAB at start of http-fetch output");
820a5361 1539) die("fetch-pack: expected hash then LF at end of http-fetch output");
820a5361 1546) die("fetch-pack: unable to finish http-fetch");
820a5361 1550) die("fetch-pack: pack downloaded from %s does not match expected hash %.*s",
820a5361 1551)     uri, (int) the_hash_algo->hexsz,
820a5361 1552)     packfile_uris.items[i].string);

http-fetch.c

http.c
1448a32c 2305) target ? hash_to_hex(target->hash) : base_url,

packfile.c
d6f3fabd 1463) return;

protocol.c

qsort.c
040a6551 58) char *tmp = xmalloc(size);
43fe901b 59) msort_with_tmp(b, n, s, cmp, tmp);
43fe901b 60) free(tmp);

read-cache.c
ee70c128 1745) if (advice_unknown_index_extension) {
ee70c128 1746) warning(_("ignoring optional %.4s index extension"), ext);
ee70c128 1747) advise(_("This is likely due to the file having been written by a newer\n"

remote-curl.c

sequencer.c
7c5b2e1d 832) free(kv.items[name_i].util);
7c5b2e1d 836) free(kv.items[email_i].util);
7c5b2e1d 840) free(kv.items[date_i].util);
ccafcb32 884) static char *read_author_date_or_null(void)
ccafcb32 888) if (read_author_script(rebase_path_author_script(),
ccafcb32 890) return NULL;
ccafcb32 891) return date;
7258d3d1 902) error(_("malformed ident line"));
7258d3d1 903) return NULL;
7258d3d1 912) static void push_dates(struct child_process *child)
7258d3d1 914) time_t now = time(NULL);
7258d3d1 915) struct strbuf date = STRBUF_INIT;
7258d3d1 917) strbuf_addf(&date, "@%"PRIuMAX, (uintmax_t)now);
7258d3d1 918) argv_array_pushf(&child->env_array, "GIT_AUTHOR_DATE=%s", date.buf);
7258d3d1 919) argv_array_pushf(&child->env_array, "GIT_COMMITTER_DATE=%s", date.buf);
7258d3d1 920) strbuf_release(&date);
7258d3d1 921) }
ccafcb32 983) int res = -1;
ccafcb32 984) struct strbuf datebuf = STRBUF_INIT;
ccafcb32 985) char *date = read_author_date_or_null();
ccafcb32 987) if (!date)
ccafcb32 988) return -1;
ccafcb32 990) strbuf_addf(&datebuf, "@%s", date);
ccafcb32 991) res = setenv("GIT_COMMITTER_DATE", datebuf.buf, 1);
ccafcb32 993) strbuf_release(&datebuf);
ccafcb32 994) free(date);
ccafcb32 996) if (res)
ccafcb32 997) return -1;
7258d3d1 1016) push_dates(&cmd);
ccafcb32 1428) return error(_("malformed ident line"));
ccafcb32 1430) return error(_("corrupted author without date information"));
7258d3d1 1488) res = -1;
7258d3d1 1489) goto out;
7258d3d1 3605) push_dates(&cmd);

sha1-file.c
d6f3fabd 1571) return;
d6f3fabd 1580) return;

upload-pack.c
a8d662e3 130) return readsz;
820a5361 149) BUG("packfile_uris requires sideband-all");
a8d662e3 354) send_client_data(1, output_state.buffer, output_state.used);
820a5361 1387) string_list_clear(&data->uri_protocols, 0);

Commits introducting uncovered code:
Brandon Casey	040a6551 cleanup: use internal memory allocation wrapper functions everywhere
Brian Downing	43fe901b compat: Add simplified merge sort implementation from glibc
Jonathan Nieder	ee70c128 index: offer advice for unknown index extensions
Jonathan Tan	820a5361 upload-pack: send part of packfile response as uri
Jonathan Tan	a8d662e3 upload-pack: refactor reading of pack-objects out
Junio C Hamano	1448a32c Merge branch 'jt/fetch-cdn-offload' into pu
Matheus Tavares	d6f3fabd object-store: add lock to read_object_file_extended()
Rohit Ashiwal	1406adc0 rebase -i: add --ignore-whitespace flag
Rohit Ashiwal	7c5b2e1d sequencer: allow callers of read_author_script() to ignore fields
Rohit Ashiwal	ccafcb32 rebase -i: support --committer-date-is-author-date
Rohit Ashiwal	7258d3d1 rebase -i: support --ignore-date


Uncovered code in 'jch' not in 'next'
--------------------------------------------------------

builtin/receive-pack.c
fabec2c5 433) the_hash_algo->init_fn(&ctx);
fabec2c5 434) the_hash_algo->update_fn(&ctx, key_in, key_len);
fabec2c5 435) the_hash_algo->final_fn(key, &ctx);

builtin/replace.c
28ba1830 275) if (strbuf_read(&result, cmd.out, the_hash_algo->hexsz + 1) < 0) {

builtin/rev-parse.c
7e0d029f 735) abbrev = hexsz;

builtin/submodule--helper.c
8d4d86b0 427) printf("%06o %s U\t", ce->ce_mode, oid_to_hex(&null_oid));

name-hash.c
08f02f8e 100) hashmap_remove(&istate->dir_hash, &dir->ent, NULL);

sequencer.c
a47ba3c7 3917) res = error_errno(_("could not stat '%s'"),
a47ba3c7 3923) res = -1; /* message was printed */

t/helper/test-hashmap.c
dc3b1290 108) hashmap_entry_init(&entries[i]->ent, hashes[i]);
2759f230 109) hashmap_add(&map, &entries[i]->ent);
5769e96c 112) hashmap_free(&map);
dc3b1290 121) hashmap_entry_init(&entries[i]->ent, hashes[i]);
2759f230 122) hashmap_add(&map, &entries[i]->ent);
5769e96c 132) hashmap_free(&map);

t/helper/test-lazy-init-name-hash.c
5e84e5eb 44) hashmap_for_each_entry(&the_index.dir_hash, &iter_dir, dir,
5e84e5eb 48) hashmap_for_each_entry(&the_index.name_hash, &iter_cache, ce,

Commits introducting uncovered code:
brian m. carlson	fabec2c5 builtin/receive-pack: switch to use the_hash_algo
brian m. carlson	28ba1830 builtin/replace: make hash size independent
brian m. carlson	7e0d029f builtin/rev-parse: switch to use the_hash_algo
brian m. carlson	8d4d86b0 cache: remove null_sha1
Eric Wong	08f02f8e hashmap_remove takes "const struct hashmap_entry *"
Eric Wong	dc3b1290 hashmap_entry_init takes "struct hashmap_entry *"
Eric Wong	2759f230 hashmap_add takes "struct hashmap_entry *"
Eric Wong	5769e96c hashmap: introduce hashmap_free_entries
Eric Wong	5e84e5eb hashmap: use *_entry APIs for iteration
Phillip Wood	a47ba3c7 rebase -i: check for updated todo after squash and reword


Uncovered code in 'next' not in 'master'
--------------------------------------------------------

builtin/am.c
22184497 1696) die(_("unable to write index file"));

builtin/checkout.c
65c01c64 766) strbuf_add_unique_abbrev(&old_commit_shortname,
65c01c64 767)  &old_branch_info->commit->object.oid,
65c01c64 769) o.ancestor = old_commit_shortname.buf;

builtin/merge-recursive.c
9822175d 68) die_resolve_conflict("merge");

builtin/pack-objects.c
7c59828b 1136) return 1;
7c59828b 2694) (reuse_packfile_bitmap &&
7c59828b 2695)  bitmap_walk_contains(bitmap_git, reuse_packfile_bitmap, oid));
d35b73c5 2847) allow_pack_reuse = git_config_bool(k, v);
d35b73c5 2848) return 0;

builtin/stash.c
34933d0e 1135) ret = -1;
34933d0e 1136) goto done;

cache-tree.c
724dd767 619) cache_tree_free(&index_state->cache_tree);
724dd767 620) cache_tree_valid = 0;
724dd767 633) return WRITE_TREE_PREFIX_ERROR;
724dd767 653) fprintf(stderr, "BUG: There are unmerged index entries:\n");
724dd767 654) for (i = 0; i < index_state->cache_nr; i++) {
724dd767 655) const struct cache_entry *ce = index_state->cache[i];
724dd767 656) if (ce_stage(ce))
724dd767 657) fprintf(stderr, "BUG: %d %.*s\n", ce_stage(ce),
724dd767 658) (int)ce_namelen(ce), ce->name);
724dd767 660) BUG("unmerged index entries when writing inmemory index");

commit-graph.c
fbab552a 483) die("dying as requested by the '%s' variable on commit-graph load!",

dir.c
89a1f4aa 374) return MATCHED_RECURSIVELY_LEADING_PATHSPEC;

merge-recursive.c
f836bf39 951) ret = err(opt, _("cannot read object %s '%s'"),
f836bf39 953) goto free_buf;
98a1d3d8 3678) return -1;
ff1bfa2c 3742)    oid_to_hex(merge_bases[i]));

pack-bitmap.c
7c59828b 791) return; /* broken packfile, punt */
7c59828b 808) return;
7c59828b 811) return;
7c59828b 823) return;
7c59828b 861) i = bitmap_git->pack->num_objects / BITS_IN_EWORD;
934b7d0a 903) return 0;

read-cache.c
22184497 1487) return -1;
22184497 1491) ret = -1;

sha1-name.c
59fa5f5a 1172) return MISSING_OBJECT;
59fa5f5a 1178) return MISSING_OBJECT;

t/helper/test-progress.c
2bb74b53 48) die("need a title for the progress output");
2bb74b53 59) die("invalid input: '%s'\n", line.buf);
2bb74b53 67) die("invalid input: '%s'\n", line.buf);
2bb74b53 70) die("invalid input: '%s'\n", line.buf);

Commits introducting uncovered code:
Elijah Newren	65c01c64 checkout: provide better conflict hunk description with detached HEAD
Elijah Newren	9822175d Ensure index matches head before invoking merge machinery, round N
Elijah Newren	724dd767 cache-tree: share code between functions writing an index as a tree
Elijah Newren	89a1f4aa dir: if our pathspec might match files under a dir, recurse into it
Elijah Newren	f836bf39 merge-recursive: future-proof update_file_flags() against memory leaks
Elijah Newren	98a1d3d8 merge-recursive: exit early if index != head
Elijah Newren	ff1bfa2c merge-recursive: use common name for ancestors/common/base_list
Jeff King	7c59828b pack-objects: improve partial packfile reuse
Jeff King	d35b73c5 pack-objects: introduce pack.allowPackReuse
Jeff King	fbab552a commit-graph: bump DIE_ON_LOAD check to actual load-time
Jeff King	934b7d0a pack-bitmap: introduce bitmap_walk_contains()
René Scharfe	59fa5f5a sha1-name: check for overflow of N in "foo^N" and "foo~N"
SZEDER Gábor	2bb74b53 Test the progress display
Thomas Gummerer	22184497 factor out refresh_and_write_cache function
Thomas Gummerer	34933d0e stash: make sure to write refreshed cache


Uncovered code in 'master' not in 'master@{1}'
--------------------------------------------------------

builtin/am.c
0dfed92d 1276) die(_("missing author line in commit %s"),
0dfed92d 1277)       oid_to_hex(&commit->object.oid));

builtin/push.c
8e4c8af0 609) die(_("bad repository '%s'"), repo);
8e4c8af0 625) die(_("--all and --tags are incompatible"));
8e4c8af0 627) die(_("--all can't be combined with refspecs"));
8e4c8af0 631) die(_("--mirror and --tags are incompatible"));
8e4c8af0 636) die(_("--all and --mirror are incompatible"));

builtin/rebase.c
2b318aa6 1273) goto done;
c0efb4c1 1289) goto done;

connect.c
ebb8d2c9 921) path = host - 2; /* include the leading "//" */

pack-bitmap.c
dad3f060 712) object = parse_object_or_die(get_tagged_oid(tag), NULL);

pack-objects.c
3a37876b 185) BUG("duplicate object inserted into hash");

repo-settings.c
50f26bd0 57) UPDATE_DEFAULT_BOOL(r->settings.fetch_write_commit_graph, 1);

setup.c
e2683d51 952)     !is_dir_sep(dir->buf[min_offset - 1])) {
e2683d51 953) strbuf_addch(dir, '/');
e2683d51 954) min_offset++;

trace2/tr2_dst.c
1fd881d4 218) warning("trace2: unknown value for '%s': '%s'",

trace2/tr2_tgt_normal.c
e3443055 189) strbuf_addf(&buf_payload, "alias %s -> ", alias);
e3443055 190) sq_append_quote_argv_pretty(&buf_payload, argv);
e3443055 201) strbuf_addf(&buf_payload, "child_start[%d]", cmd->trace2_child_id);
e3443055 204) strbuf_addstr(&buf_payload, " cd ");
e3443055 206) strbuf_addstr(&buf_payload, ";");
e3443055 214) strbuf_addch(&buf_payload, ' ');
e3443055 216) strbuf_addstr(&buf_payload, "git ");
e3443055 217) sq_append_quote_argv_pretty(&buf_payload, cmd->argv);
e3443055 242) if (exe) {
e3443055 244) strbuf_addch(&buf_payload, ' ');
e3443055 246) sq_append_quote_argv_pretty(&buf_payload, argv);

trace2/tr2_tgt_perf.c
371df1be 88) fl_end_col = buf->len + TR2FMT_PERF_FL_WIDTH;
371df1be 90) if (file && *file) {
371df1be 91) struct strbuf buf_fl = STRBUF_INIT;
371df1be 93) strbuf_addf(&buf_fl, "%s:%d", file, line);
371df1be 95) if (buf_fl.len <= TR2FMT_PERF_FL_WIDTH)
371df1be 96) strbuf_addbuf(buf, &buf_fl);
371df1be 98) size_t avail = TR2FMT_PERF_FL_WIDTH - 3;
371df1be 99) strbuf_addstr(buf, "...");
371df1be 100) strbuf_add(buf,
371df1be 101)    &buf_fl.buf[buf_fl.len - avail],
371df1be 105) strbuf_release(&buf_fl);
371df1be 108) while (buf->len < fl_end_col)
371df1be 111) strbuf_addstr(buf, " | ");
742ed633 302) strbuf_addf(&buf_payload, "alias:%s argv:[", alias);
742ed633 303) sq_append_quote_argv_pretty(&buf_payload, argv);
742ed633 304) strbuf_addch(&buf_payload, ']');
742ed633 335) strbuf_addstr(&buf_payload, "git");
742ed633 336) if (cmd->argv[0])
742ed633 337) strbuf_addch(&buf_payload, ' ');
742ed633 391) strbuf_addstr(&buf_payload, "argv:[");
742ed633 392) if (exe) {
742ed633 393) strbuf_addstr(&buf_payload, exe);
742ed633 394) if (argv[0])
742ed633 395) strbuf_addch(&buf_payload, ' ');
742ed633 397) sq_append_quote_argv_pretty(&buf_payload, argv);
742ed633 398) strbuf_addch(&buf_payload, ']');
da4589ce 459) strbuf_addf(&buf_payload, "label:%s", label);
da4589ce 460) if (fmt && *fmt) {
da4589ce 461) strbuf_addch(&buf_payload, ' ');
da4589ce 462) maybe_append_string_va(&buf_payload, fmt, ap);
da4589ce 479) strbuf_addf(&buf_payload, "label:%s", label);
da4589ce 480) if (fmt && *fmt) {
da4589ce 481) strbuf_addch(&buf_payload, ' ' );
da4589ce 482) maybe_append_string_va(&buf_payload, fmt, ap);

Commits introducting uncovered code:
Denton Liu	2b318aa6 rebase: refactor can_fast_forward into goto tower
Denton Liu	c0efb4c1 rebase: fast-forward --onto in more cases
Derrick Stolee	50f26bd0 fetch: add fetch.writeCommitGraph config setting
Jeff Hostetler	e3443055 trace2: cleanup whitespace in normal format
Jeff Hostetler	371df1be trace2: cleanup column alignment in perf target format
Jeff Hostetler	742ed633 trace2: cleanup whitespace in perf format
Jeff Hostetler	da4589ce trace2: trim whitespace in region messages in perf target format
Jeff King	0dfed92d git-am: handle missing "author" when parsing commit
Jeff King	3a37876b pack-objects: drop packlist index_pos optimization
Johannes Schindelin	e2683d51 Fix .git/ discovery at the root of UNC shares
René Scharfe	dad3f060 tag: factor out get_tagged_oid()
René Scharfe	1fd881d4 trace2: use warning() directly in tr2_dst_malformed_warning()
Thomas Gummerer	8e4c8af0 push: disallow --all and refspecs when remote.<name>.mirror is set
Torsten Bögershausen	ebb8d2c9 mingw: support UNC in git clone file://server/share/repo


